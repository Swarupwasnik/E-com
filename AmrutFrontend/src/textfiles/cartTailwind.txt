import React, { useState, useEffect } from "react";
import Layout from "../components/layout/Layout";
import { useAuth } from "../context/auth";
import { useCart } from "../context/cart";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import DropIn from "braintree-web-drop-in-react";
import axios from "axios";
import logo from "../pictures/logo.png";
import COD from "../pictures/COD.png";
import cash from "../pictures/cash.png";

const Cart = () => {
  const [auth, setAuth] = useAuth();
  const [cart, setCart] = useCart();
  const navigate = useNavigate();
  const [clientToken, setClientToken] = useState("");
  const [instance, setInstance] = useState("");
  const [loading, setLoading] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("Online Payment");
  const [showPaymentGateway, setShowPaymentGateway] = useState(true);
  const [selectedOption, setSelectedOption] = useState('Fedex Delivery');

  const totalPrice = () => {
    try {
      let total = 0;
      cart?.forEach((item) => {
        total += item.price * item.quantity;
      });
      return total.toLocaleString('en-US', {
        style: 'currency',
        currency: 'USD',
      });
    } catch (error) {
      console.log(error);
    }
  };

  const handleQuantityChange = (pid, newQuantity) => {
    const updatedCart = cart.map((item) => {
      if (item._id === pid) {
        return { ...item, quantity: newQuantity };
      }
      return item;
    });
    setCart(updatedCart);
    localStorage.setItem("cart", JSON.stringify(updatedCart));
    console.log('Updated cart:', updatedCart);
  };

  const removeCartItem = (pid) => {
    console.log("Removing item with ID:", pid);
    try {
      const updatedCart = cart.filter((item) => item._id !== pid);
      setCart(updatedCart);
      localStorage.setItem("cart", JSON.stringify(updatedCart));
      console.log("Updated cart:", updatedCart);

      toast.success("Item removed from cart");
    } catch (err) {
      console.error("Error removing item from cart:", err);
      toast.error("Failed to remove item from cart");
    }
  };

  const getToken = async () => {
    try {
      const { data } = await axios.get(
        "http://localhost:3000/api/v1/product/braintree/token"
      );
      setClientToken(data?.clientToken);
    } catch (err) {
      console.log(err);
    }
  };

  useEffect(() => {
    getToken();
  }, [auth?.token]);

  const handlePayment = async () => {
    try {
      setLoading(true);
      let response;
      if (paymentMethod === "Online Payment") {
        const { nonce } = await instance.requestPaymentMethod();
        response = await axios.post(
          "http://localhost:3000/api/v1/product/braintree/payment",
          {
            nonce,
            cart,
          }
        );
      } else {
        // For Cash on Delivery, just proceed with no transaction
        response = { data: { ok: true } };
      }
      setLoading(false);
      localStorage.removeItem("cart");
      setCart([]);
      if (paymentMethod === "online Payment") {
        navigate("/dash/user/order");
        toast.success("Payment Successfully");
      } else {
        toast.success("Thank you for your order!");
      }
    } catch (err) {
      console.log(err);
      setLoading(false);
    }
  };

  const handleCashOnDelivery = () => {
    if (!auth.token) {
      navigate("/login", { state: "/cart" });
    } else {
      setPaymentMethod("Cash on Delivery");
      setShowPaymentGateway(false);
    }
  };

  return (
    <Layout>
      <div className="container single_product_container">
        <div className="row">
          <div className="col">
            {/* <!-- Breadcrumbs --> */}
            <div className="breadcrumbs d-flex flex-row align-items-center">
              <ul>
                <li>
                  <a href="/">Home</a>
                </li>
                <li>
                  <a href="/shop">
                    <i className="fa fa-angle-right" aria-hidden="true"></i>
                    Shop
                  </a>
                </li>
                <li className="active">
                  <a href="#">
                    <i className="fa fa-angle-right" aria-hidden="true"></i>
                    Cartpage
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>

        <div className="flex flex-col items-center border-b bg-white py-4 sm:flex-row sm:px-10 lg:px-20 xl:px-32">
          <a href="#" className="text-2xl font-bold text-gray-800">
            <div className="w-full px-6 py-8 md:px-8 lg:w-1/2">
              <div className="flex justify-center mx-auto">
                <img className="w-50 h-50 sm:h-8" src={logo} alt="" />
              </div>
            </div>
          </a>
          <div className="mt-4 py-2 text-xs sm:mt-0 sm:ml-auto sm:text-base">
            <div className="relative">
              <ul className="relative flex w-full items-center justify-between space-x-2 sm:space-x-4">
                <li className="flex items-center space-x-3 text-left sm:space-x-4">
                  <a
                    className="flex h-6 w-6 items-center justify-center rounded-full bg-emerald-200 text-xs font-semibold text-emerald-700"
                    href="#"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-4 w-4"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      strokeWidth="2"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M5 13l4 4L19 7"
                      />
                    </svg>
                  </a>
                  <span className="font-semibold text-gray-900">Shop</span>
                </li>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-400"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth="2"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M9 5l7 7-7 7"
                  />
                </svg>
                <li className="flex items-center space-x-3 text-left sm:space-x-4">
                  <a
                    className="flex h-6 w-6 items-center justify-center rounded-full bg-gray-600 text-xs font-semibold text-white ring ring-gray-600 ring-offset-2"
                    href="#"
                  >
                    2
                  </a>
                  <span className="font-semibold text-gray-900">Shipping</span>
                </li>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-400"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth="2"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M9 5l7 7-7 7"
                  />
                </svg>
                <li className="flex items-center space-x-3 text-left sm:space-x-4">
                  <a
                    className="flex h-6 w-6 items-center justify-center rounded-full bg-gray-400 text-xs font-semibold text-white"
                    href="#"
                  >
                    3
                  </a>
                  <span className="font-semibold text-gray-500">Payment</span>
                </li>
              </ul>
            </div>
          </div>
        </div>

        <div className="grid sm:px-10 lg:grid-cols-2 lg:px-20 xl:px-32">
          <div className="px-4 pt-8">
            <p className="text-xl font-medium">Order Summary</p>
            <p className="text-gray-400">
              Check your items. And select a suitable shipping method.
            </p>
            <div className="mt-8 space-y-3 rounded-lg border bg-white px-2 py-4 sm:px-6">
              {cart?.map((p) => (
                <div
                  key={p._id}
                  className="flex flex-col rounded-lg bg-white sm:flex-row"
                >
                  <img
                    className="m-2 h-24 w-28 rounded-md border object-cover object-center"
                    src={`http://localhost:3000/api/v1/product/product-photo/${p._id}`}
                    alt={p.name}
                  />
                  <div className="flex w-full flex-col px-4 py-4">
                    <span className="font-semibold">{p.name}</span>
                    <p className="text-lg font-bold">${p.price}</p>
                    <div className="flex items-center justify-between">
                      <label
                        htmlFor={`quantity-${p._id}`}
                        className="text-gray-700"
                      >
                        Quantity:
                      </label>
                      <input
                        type="number"
                        id={`quantity-${p._id}`}
                        className="w-16 text-center border rounded"
                        value={p.quantity}
                        onChange={(e) =>
                          handleQuantityChange(p._id, parseInt(e.target.value))
                        }
                        min="1"
                      />
                      <button
                        className="ml-auto text-red-500"
                        onClick={() => removeCartItem(p._id)}
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <p className="mt-8 text-lg font-medium">Shipping Methods</p>
            <form className="mt-5 grid gap-6">
              <div className="relative">
                <input
                  className="peer hidden"
                  id="radio_1"
                  type="radio"
                  name="radio"
                  checked={selectedOption === 'Fedex Delivery'}
                  onChange={() => setSelectedOption('Fedex Delivery')}
                />
                <span className="peer-checked:border-gray-700 absolute right-4 top-1/2 -translate-y-1/2 rounded-full border-2 border-gray-300 bg-white w-5 h-5 peer-checked:border-gray-700"></span>
                <label
                  className="peer-checked:border-2 peer-checked:border-gray-700 flex cursor-pointer select-none rounded-lg border border-gray-300 p-4 peer-checked:bg-gray-50"
                  htmlFor="radio_1"
                >
                  <img
                    className="w-14 object-contain"
                    src="https://pngimg.com/uploads/fedex/fedex_PNG25.png"
                    alt=""
                  />
                  <div className="ml-5">
                    <span className="mt-2 font-semibold">Fedex Delivery</span>
                    <p className="text-slate-500 text-sm leading-6">
                      Delivery: 2-4 Days
                    </p>
                  </div>
                </label>
              </div>
              <div className="relative">
                <input
                  className="peer hidden"
                  id="radio_2"
                  type="radio"
                  name="radio"
                  checked={selectedOption === 'InPost Delivery'}
                  onChange={() => setSelectedOption('InPost Delivery')}
                />
                <span className="peer-checked:border-gray-700 absolute right-4 top-1/2 -translate-y-1/2 rounded-full border-2 border-gray-300 bg-white w-5 h-5 peer-checked:border-gray-700"></span>
                <label
                  className="peer-checked:border-2 peer-checked:border-gray-700 flex cursor-pointer select-none rounded-lg border border-gray-300 p-4 peer-checked:bg-gray-50"
                  htmlFor="radio_2"
                >
                  <img
                    className="w-14 object-contain"
                    src="https://static.inpost.pl/images/logo.svg"
                    alt=""
                  />
                  <div className="ml-5">
                    <span className="mt-2 font-semibold">InPost Delivery</span>
                    <p className="text-slate-500 text-sm leading-6">
                      Delivery: 3-6 Days
                    </p>
                  </div>
                </label>
              </div>
            </form>
          </div>
          <div className="mt-10 bg-gray-50 px-4 pt-8 lg:mt-0">
            <p className="text-xl font-medium">Payment Details</p>
            <p className="text-gray-400">
              Complete your order by providing your payment details.
            </p>
            <div className="">
              <div className="flex items-center justify-between">
                <p className="text-sm font-medium text-gray-900">Subtotal</p>
                <p className="font-semibold text-gray-900">{totalPrice()}</p>
              </div>
              <div className="flex items-center justify-between">
                <p className="text-sm font-medium text-gray-900">Shipping</p>
                <p className="font-semibold text-gray-900">$8.00</p>
              </div>
            </div>
            <div className="flex items-center justify-between border-t py-2">
              <p className="text-sm font-medium text-gray-900">Total</p>
              <p className="text-2xl font-semibold text-gray-900">{totalPrice()}</p>
            </div>

            {auth?.user?.address ? (
              <>
                <div className="mb-3">
                  <h4>Your Address</h4>
                  <h5>{auth?.user?.address}</h5>
                  <button
                    className="btn btn-outline-warning"
                    onClick={() => navigate("/dash/user/profile")}
                  >
                    Update Address
                  </button>
                </div>
              </>
            ) : (
              <div className="mb-3">
                {auth?.token ? (
                  <button
                    className="btn btn-outline-warning"
                    onClick={() => navigate("/dash/user/profile")}
                  >
                    Update Address
                  </button>
                ) : (
                  <button
                    className="btn btn-outline-warning"
                    onClick={() =>
                      navigate("/login", {
                        state: "/cart",
                      })
                    }
                  >
                    Please Login to checkout
                  </button>
                )}
              </div>
            )}
            <div className="mt-6 border-t pt-4">
              <div className="flex flex-col">
                <label className="mb-2 font-semibold">Payment Method</label>
                <select
                  value={paymentMethod}
                  onChange={(e) => {
                    setPaymentMethod(e.target.value);
                    setShowPaymentGateway(e.target.value === "Online Payment");
                  }}
                  className="p-2 border rounded"
                >
                  <option value="Online Payment">Online Payment</option>
                  <option value="Cash on Delivery">Cash on Delivery</option>
                </select>
              </div>
              {showPaymentGateway && (
                clientToken && auth?.token && cart.length > 0 && (
                  <DropIn
                    options={{
                      authorization: clientToken,
                      paypal: {
                        flow: "vault",
                      },
                    }}
                    onInstance={(instance) => setInstance(instance)}
                  />
                )
              )}
              <button
                onClick={handlePayment}
                disabled={loading || !auth?.user?.address}
                className="mt-4 w-full rounded-lg bg-gray-900 px-6 py-3 font-medium text-white"
              >
                {loading ? "Processing..." : "Confirm Order"}
              </button>
              {!showPaymentGateway && (
                <div className="flex justify-center mt-4">
                  <img className="h-24 object-cover object-center" src={COD} alt="COD" />
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default Cart;
