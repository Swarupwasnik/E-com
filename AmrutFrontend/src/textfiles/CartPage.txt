import React, { useEffect, useState } from "react";
import Layout from "../components/layout/Layout";
import { useAuth } from "../context/auth";
import { useCart } from "../context/cart";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import "../../src/style.css";
// import { token } from "morgan";
import axios from "axios";
import DropIn from "braintree-web-drop-in-react";
// import Razorpay from "razorpay";

const CartPage = () => {
  const [auth, setAuth] = useAuth();
  const [cart, setCart] = useCart();
  const navigate = useNavigate();
  const [clientToken, setClientToken] = useState("");
  const [instance, setInstance] = useState("");
  const [loading, setLoading] = useState("");
  //total price
  const totalPrice = () => {
    try {
      let total = 0;
      cart?.map((item) => {
        total = total + item.price;
      });
      return total.toLocaleString("en-US", {
        style: "currency",
        currency: "USD",
      });
    } catch (error) {
      console.log(error);
    }
  };

  const removeCartItem = (pid) => {
    console.log("Removing item with ID:", pid);
    try {
      const updatedCart = cart.filter((item) => item._id !== pid);
      setCart(updatedCart);
      localStorage.setItem("cart", JSON.stringify(updatedCart)); // Update localStorage with filtered cart
      console.log("Updated cart:", updatedCart);

      toast.success("Item removed from cart");
    } catch (err) {
      console.error("Error removing item from cart:", err);
      toast.error("Failed to remove item from cart");
    }
  };

  // get payment gatway token

  const getToken = async () => {
    try {
      const { data } = await axios.get(
        "http://localhost:3000/api/v1/product/braintree/token"
      );
      setClientToken(data?.clientToken);
    } catch (err) {
      console.log(err);
    }
  };

  useEffect(() => {
    getToken();
  }, [auth?.token]);

  const handlePayment = async () => {
    try {
      setLoading(true);
      const { nonce } = await instance.requestPaymentMethod();
      const { data } = await axios.post(
        "http://localhost:3000/api/v1/product/braintree/payment",
        {
          nonce,
          cart,
        }
      );
      setLoading(false);
      localStorage.removeItem("cart");
      setCart([]);
      navigate("/dash/user/order");
      toast.success("Payment Sucessfully");
    } catch (err) {
      console.log(err);
      setLoading(false);
    }
  };

  return (
    <Layout>
      <div className="container">
        <div className="row">
          <div className="col-md-12">
            <h1 className="text-center bg-light p-2 mb-1 text-secondary">
              {`Hello ${auth?.token && auth?.user?.name}`}
              <h6 className="text-center">
                {cart?.length
                  ? `You Have ${cart.length} items in your cart ${
                      auth?.token ? "" : "please login to checkout !"
                    }`
                  : " Your Cart Is Empty"}
              </h6>
            </h1>
          </div>
        </div>
        <div className="row">
          <div className="col-md-7">
            <div className="row m-2">
              {cart?.map((p) => (
                <div className="row m-2  p-3 card mb-2 flex-row" key={p._id}>
                  <div className="col-md-4">
                    <img
                      className="card-image-top"
                      src={`http://localhost:8080/api/v1/product/product-photo/${p._id}`}
                      alt={p.name}
                      height={"150px"}
                      width={"150px"}
                    />
                  </div>
                  <div className="col-md-8">
                    <h6>{p.name}</h6>
                    <p>{p.description.substring(0, 30)}</p>
                    <h4>Price : {p.price}</h4>
                    <button
                      type="button"
                      className="btn btn-danger"
                      onClick={() => removeCartItem(p._id)}
                    >
                      Remove
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
          <div className="col-md-5 text-center">
            <h5>Cart Summary</h5>
            <p>Total | Checkout | Payment</p>
            <hr />
            <h4>Total : {totalPrice()}</h4>
            {auth?.user?.address ? (
              <>
                <div className="mb-3">
                  <p>Current Address</p>
                  <h6>{auth.user.address}</h6>
                  <button
                    onClick={() => navigate(`/dash/user/profile`)}
                    className="btn btn-outline-warning"
                    type="button"
                  >
                    Update Address
                  </button>
                </div>
              </>
            ) : (
              <div className="mb-3">
                {auth.token ? (
                  <button
                    type="button"
                    onClick={() => navigate(`/dash/user/profile`)}
                    className="btn btn-outline-warning"
                  >
                    Update Address
                  </button>
                ) : (
                  <>
                    <button
                      className="btn btn-outline-warning"
                      onClick={() =>
                        navigate("/login", {
                          state: "/cart",
                        })
                      }
                      type="button"
                    >
                      Please Login to Checkout
                    </button>
                  </>
                )}
              </div>
            )}
            <div className="mt-2">
              {!clientToken || !cart?.length ? (
                ""
              ) : (
                <>
                  <DropIn
                    options={{
                      authorization: clientToken,
                      paypal: {
                        flow: "vault",
                      },
                    }}
                    onInstance={(instance) => setInstance(instance)} // Corrected callback
                  />
                  <button
                    className="btn btn-primary"
                    onClick={handlePayment}
                    // disabled={!loading || !instance || !auth?.user?.address}
                  >
                    {loading ? "processing" : "Make Payment"}
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default CartPage;
